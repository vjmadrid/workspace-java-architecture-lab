<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.acme.architecture.testing</groupId>
	<artifactId>architecture-testing</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>architecture-testing</name>
	<url>http://maven.apache.org</url>

	<properties>

		<!-- Compiler & Resources -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Dependency Versions -->
		<junit.platform.version>1.6.0</junit.platform.version>
		<junit.jupiter.version>5.6.0</junit.jupiter.version>
		<junit.version>4.13</junit.version>
		<junit.vintage.version>5.6.0</junit.vintage.version>
		<mockito.version>3.3.3</mockito.version>
		<assertj-core.version>3.15.0</assertj-core.version>
		<archunit.version>0.13.1</archunit.version>
		
		<!-- Plugins -->
		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
		<jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>
	</properties>

	<dependencies>

		<!-- *** Architecture Libraries *** -->

		<!-- *** Third Party Libraries *** -->
		
		<!-- * JUnit Platform * : Running and discovering test (for use in : tools (Eclipse, Idea,...) and build tools (Maven, Gradle, etc.)) -->
		
		<!-- junit-platform-runner : Platform unit test framework v5 (Add JUnit Platform + TestEngine API) -> Basic execute test -->
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<version>${junit.platform.version}</version>
		</dependency>
		
		<!-- * JUnit Jupiter * -->

		<!-- junit-jupiter-engine : unit test framework v5 (Add JUnit Platform + API) Use write test (include : annotations, etc.) -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit.jupiter.version}</version>
		</dependency>


		<!-- junit-vintage-engine : unit test framework for execute JUnit 3 and JUnit 4 (Add JUnit 4.13 transitively depends version vintage) -->
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>${junit.jupiter.version}</version>
		</dependency>
		
		<!-- assertj-core : assertions for testing -->
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj-core.version}</version>
		</dependency>
		
		<!-- mockito : mocking framework -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>${mockito.version}</version>
		</dependency>

		<!-- archunit :assert architecture rules framework -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-api</artifactId>
			<version>${archunit.version}</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>architecture-testing</finalName>
		<plugins>

			<!-- maven-compiler-plugin : Plugin used to compile the project source -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- maven-resources-plugin : Plugin used to handle the project resources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- maven-surefire-plugin : Plugin used to run unit tests - Generate 
				reports in the directory target/surefire-reports -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					
					<includes>
						<include>**/Test*.java</include>
						<include>**/*Test.java</include>
						<include>**/*Tests.java</include>
						<include>**/*TestCase.java</include>
					</includes>
					
					<skipTests>${skip.unit.tests}</skipTests>
					<testFailureIgnore>false</testFailureIgnore>
					
					<properties>
						<configurationParameters>
							junit.jupiter.execution.parallel.enabled=true
							junit.jupiter.execution.parallel.config.dynamic.factor=2
							junit.platform.output.capture.stdout=true
							junit.platform.output.capture.stderr=true
						</configurationParameters>
					</properties>
					
				</configuration>
			</plugin>

			<!-- jacoco-maven-plugin : Plugin used to generate code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>coverage-initialize</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>coverage-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<outputDirectory>target/jacoco-reports</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>coverage-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>80%</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- maven-deploy-plugin : Plugin used during the deploy phase (use with 
				artifact repository) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.2</version>
				<executions>
					<execution>
						<id>default-deploy</id>
						<phase>deploy</phase>
						<goals>
							<goal>deploy</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>